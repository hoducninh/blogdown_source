for (i in (1:nrow(cohort_fooder))) {
cohort_fooder[i,j] <- cohort_fooder[i,j]/cohort_fooder[1,j]
print(i,j,cohort_fooder[i,j])
}
}
for (j in (2:ncol(cohort_fooder))) {
for (i in (1:nrow(cohort_fooder))) {
cohort_fooder[i,j] <- cohort_fooder[i,j]/cohort_fooder[1,j]
print(i)
print(j)
print(cohort_fooder[i,j])
}
}
cohort_fooder <- food_data %>%
group_by(cohort_grp, cohort_period) %>%
summarise(no_cus=n_distinct(userid)) %>%
spread(cohort_grp, no_cus)
for (j in (2:ncol(cohort_fooder))) {
for (i in (1:nrow(cohort_fooder))) {
cohort_fooder[i,j] <- cohort_fooder[i,j]/cohort_fooder[1,j]
print(i)
print(j)
print(cohort_fooder[i,j])
print(cohort_fooder[1,j])
}
}
print(cohort_fooder[i,j])
print(cohort_fooder[1,j])
j
cohort_fooder <- food_data %>%
group_by(cohort_grp, cohort_period) %>%
summarise(no_cus=n_distinct(userid)) %>%
spread(cohort_grp, no_cus)
for (j in (2:ncol(cohort_fooder))) {
max_cohort_grp <- cohort_fooder[1,j]
for (i in (1:nrow(cohort_fooder))) {
cohort_fooder[i,j] <- cohort_fooder[i,j]/max_cohort_grp
}
}
cohort_fooder <- food_data %>%
group_by(cohort_grp, cohort_period) %>%
summarise(no_cus=n_distinct(userid)) %>%
spread(cohort_grp, no_cus)
for (j in (2:ncol(cohort_fooder))) {
max_cohort_grp <- cohort_fooder[1,j]
for (i in (1:nrow(cohort_fooder))) {
cohort_fooder[i,j] <- cohort_fooder[i,j]/max_cohort_grp
}
}
View(cohort_fooder)
user_retention <- food_data %>%
group_by(cohort_grp, cohort_period) %>%
summarise(no_cus=n_distinct(userid)) %>%
spread(cohort_grp, no_cus)
for (j in (2:ncol(user_retention))) {
max_cohort_grp <- user_retention[1,j]
for (i in (1:nrow(user_retention))) {
user_retention[i,j] <- user_retention[i,j]/max_cohort_grp
}
}
View(user_retention)
library(ggplot2)
user_retention %>% names
user_retention <- t(user_retention)
user_retention <- food_data %>%
group_by(cohort_grp, cohort_period) %>%
summarise(no_cus=n_distinct(userid)) %>%
spread(cohort_grp, no_cus)
for (j in (2:ncol(user_retention))) {
max_cohort_grp <- user_retention[1,j]
for (i in (1:nrow(user_retention))) {
user_retention[i,j] <- user_retention[i,j]/max_cohort_grp
}
}
user_retention <- t(user_retention) %>% as.data.frame()
View(user_retention)
user_retention <- food_data %>%
group_by(cohort_grp, cohort_period) %>%
summarise(no_cus=n_distinct(userid)) %>%
spread(cohort_grp, no_cus)
for (j in (2:ncol(user_retention))) {
max_cohort_grp <- user_retention[1,j]
for (i in (1:nrow(user_retention))) {
user_retention[i,j] <- user_retention[i,j]/max_cohort_grp
}
}
View(user_retention)
user_retention_1 <- t(user_retention)
View(user_retention_1)
user_retention_1 <- t(user_retention) %>% as.data.frame()
View(user_retention_1)
names(user_retention_1)
food_data <- data
names(food_data) <- tolower(names(food_data))
food_data$order_period <- as.Date(format(food_data$orderdate, "%Y-%m-01"))
food_data <- food_data %>%
group_by(userid) %>%
mutate(cohort_grp=min(order_period))
food_data$cohort_period <- round(as.numeric(food_data$order_period-food_data$cohort_grp, unit="days")/30,0) + 1
food_data$cohort_grp <- round(as.numeric(food_data$cohort_grp-as.Date("2008-12-01"), unit="days")/30,0)
user_retention <- food_data %>%
group_by(cohort_grp, cohort_period) %>%
summarise(no_cus=n_distinct(userid)) %>%
spread(cohort_grp, no_cus)
user_retention <- food_data %>%
group_by(cohort_grp, cohort_period) %>%
summarise(no_cus=n_distinct(userid)) %>%
spread(cohort_period, no_cus)
```
View(user_retention)
user_retention %>% names
user_retention$1
user_retention$"1"
user_retention <- food_data %>%
group_by(cohort_grp, cohort_period) %>%
summarise(no_cus=n_distinct(userid)) %>%
spread(cohort_period, no_cus)
user_retention %>% View
user_retention <- food_data %>%
group_by(cohort_grp, cohort_period) %>%
summarise(no_cus=n_distinct(userid)) %>%
spread(cohort_grp, no_cus)
user_retention %>% View
user_retention <- food_data %>%
group_by(cohort_grp, cohort_period) %>%
summarise(no_cus=n_distinct(userid)) %>%
spread(cohort_grp, no_cus)
View(user_retention)
user_retention <- food_data %>%
group_by(cohort_grp, cohort_period) %>%
summarise(no_cus=n_distinct(userid)) %>%
spread(cohort_period, no_cus)
```
View(user_retention)
food_data <- data
names(food_data) <- tolower(names(food_data))
food_data$order_period <- as.Date(format(food_data$orderdate, "%Y-%m-01"))
food_data <- food_data %>%
group_by(userid) %>%
mutate(cohort_grp=min(order_period))
food_data$cohort_period <- round(as.numeric(food_data$order_period-food_data$cohort_grp, unit="days")/30,0) + 1
food_data$cohort_grp <- round(as.numeric(food_data$cohort_grp-as.Date("2008-12-01"), unit="days")/30,0)
user_retention <- food_data %>%
group_by(cohort_grp, cohort_period) %>%
summarise(no_cus=n_distinct(userid)) %>%
spread(cohort_period, no_cus)
user_retention <- food_data %>%
group_by(cohort_grp, cohort_period) %>%
summarise(no_cus=n_distinct(userid)) %>%
spread(cohort_grp, no_cus)
for (j in (2:ncol(user_retention))) {
max_cohort_grp <- user_retention[1,j]
for (i in (1:nrow(user_retention))) {
user_retention[i,j] <- user_retention[i,j]/max_cohort_grp
}
}
user_retention <- t(user_retention) %>% as.data.frame()
View(user_retention)
user_retention <- food_data %>%
group_by(cohort_grp, cohort_period) %>%
summarise(no_cus=n_distinct(userid)) %>%
spread(cohort_period, no_cus)
View(user_retention)
#calculate retention (1)
x <- user_retention[,c(2:16)]
y <- user_retention[,2]
reten.r <- apply(x, 2, function(x) x/y )
reten.r <- data.frame(cohort=(user_retention$cohort), reten.r)
reten.r <- data.frame(cohort=(user_retention$cohort_grp), reten.r)
View(reten.r)
reten.r <- reten.r[,-2] #remove M01 data because it is always 100%
#dynamics analysis chart
cohort.chart1 <- melt(reten.r, id.vars = 'cohort')
colnames(cohort.chart1) <- c('cohort', 'month', 'retention')
cohort.chart1 <- filter(cohort.chart1, retention != 0)
p <- ggplot(cohort.chart1, aes(x=month, y=retention, group=cohort, colour=cohort))
p + geom_line(size=2, alpha=1/2) +
geom_point(size=3, alpha=1) +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
labs(title="Cohorts Retention ratio dynamics")
#second month analysis chart
cohort.chart2 <- filter(cohort.chart1, month=='M02') #choose any month instead of M02
p <- ggplot(cohort.chart2, aes(x=cohort, y=retention, colour=cohort))
p + geom_point(size=3) +
geom_line(aes(group=1), size=2, alpha=1/2) +
geom_smooth(aes(group=1), size=2, colour='red', method = 'lm', se=FALSE) +
labs(title="Cohorts Retention ratio for 2nd month")
reten.r %>% head
reten.r %>% names
#second month analysis chart
cohort.chart2 <- filter(cohort.chart1, month=='X1.2') #choose any month instead of M02
p <- ggplot(cohort.chart2, aes(x=cohort, y=retention, colour=cohort))
p + geom_point(size=3) +
geom_line(aes(group=1), size=2, alpha=1/2) +
geom_smooth(aes(group=1), size=2, colour='red', method = 'lm', se=FALSE) +
labs(title="Cohorts Retention ratio for 2nd month")
#cycle plot
cohort.chart3 <- cohort.chart1
cohort.chart3 <- mutate(cohort.chart3, month_cohort = paste(month, cohort))
p <- ggplot(cohort.chart3, aes(x=month_cohort, y=retention, group=month, colour=month))
cohort.chart3 %>% names
cohort.chart3Mhead
cohort.chart3 %>% head
p + geom_point(size=3) +
geom_line(aes(group=month), size=2, alpha=1/2) +
labs(title="Cohorts Retention ratio cycle plot") +
geom_line(data=m1, aes(group=1), colour='blue', size=2, alpha=1/5) +
geom_line(data=m2, aes(group=1), colour='blue', size=2, alpha=1/5) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#choose any cohorts instead of Cohort07 and Cohort06
m1 <- filter(cohort.chart3, cohort=='X1.8')
m2 <- filter(cohort.chart3, cohort=='X1.7')
p + geom_point(size=3) +
geom_line(aes(group=month), size=2, alpha=1/2) +
labs(title="Cohorts Retention ratio cycle plot") +
geom_line(data=m1, aes(group=1), colour='blue', size=2, alpha=1/5) +
geom_line(data=m2, aes(group=1), colour='blue', size=2, alpha=1/5) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#choose any cohorts instead of Cohort07 and Cohort06
m1 <- filter(cohort.chart3, cohort=='X1.1')
m2 <- filter(cohort.chart3, cohort=='X1.2')
p + geom_point(size=3) +
geom_line(aes(group=month), size=2, alpha=1/2) +
labs(title="Cohorts Retention ratio cycle plot") +
geom_line(data=m1, aes(group=1), colour='blue', size=2, alpha=1/5) +
geom_line(data=m2, aes(group=1), colour='blue', size=2, alpha=1/5) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#cycle plot
cohort.chart3 <- cohort.chart1
cohort.chart3 <- mutate(cohort.chart3, month_cohort = paste(month, cohort))
p <- ggplot(cohort.chart3, aes(x=month_cohort, y=retention, group=month, colour=month))
#choose any cohorts instead of Cohort07 and Cohort06
m1 <- filter(cohort.chart3, cohort=='X1.1')
m2 <- filter(cohort.chart3, cohort=='X1.2')
p + geom_point(size=3) +
geom_line(aes(group=month), size=2, alpha=1/2) +
labs(title="Cohorts Retention ratio cycle plot") +
geom_line(data=m1, aes(group=1), colour='blue', size=2, alpha=1/5) +
geom_line(data=m2, aes(group=1), colour='blue', size=2, alpha=1/5) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#second month analysis chart
cohort.chart2 <- filter(cohort.chart1, month=='X1.2') #choose any month instead of M02
p <- ggplot(cohort.chart2, aes(x=cohort, y=retention, colour=cohort))
p + geom_point(size=3) +
geom_line(aes(group=1), size=2, alpha=1/2) +
geom_smooth(aes(group=1), size=2, colour='red', method = 'lm', se=FALSE) +
labs(title="Cohorts Retention ratio for 2nd month")
reten.r %>% View
names(reten.r)
for (i in (2:15)) {
names(reten.r)[i] <- paste("Cohort", sep="-", "1")
}
names(reten.r)
x <- user_retention[,c(2:16)]
y <- user_retention[,2]
reten.r <- apply(x, 2, function(x) x/y )
reten.r <- data.frame(cohort=(user_retention$cohort_grp), reten.r)
names(reten.r)[i] <- paste("Cohort", sep="-", i)
reten.r <- apply(x, 2, function(x) x/y )
reten.r <- data.frame(cohort=(user_retention$cohort_grp), reten.r)
for (i in (2:15)) {
names(reten.r)[i] <- paste("Cohort", sep="-", i)
}
names(reten.r)
reten.r <- apply(x, 2, function(x) x/y )
reten.r <- data.frame(cohort=(user_retention$cohort_grp), reten.r)
for (i in (2:16)) {
names(reten.r)[i] <- paste("Cohort", sep="-", i-1)
}
names(reten.r)
reten.r <- reten.r[,-2] #remove M01 data because it is always 100%
#dynamics analysis chart
cohort.chart1 <- melt(reten.r, id.vars = 'cohort')
colnames(cohort.chart1) <- c('cohort', 'month', 'retention')
cohort.chart1 <- filter(cohort.chart1, retention != 0)
p <- ggplot(cohort.chart1, aes(x=month, y=retention, group=cohort, colour=cohort))
p + geom_line(size=2, alpha=1/2) +
geom_point(size=3, alpha=1) +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
labs(title="Cohorts Retention ratio dynamics")
cohort.chart1$cohort %>% class
cohort.chart1$cohort <- as.factor(cohort.chart1$cohort)
cohort.chart1 <- filter(cohort.chart1, retention != 0)
p <- ggplot(cohort.chart1, aes(x=month, y=retention, group=cohort, colour=cohort))
p + geom_line(size=2, alpha=1/2) +
geom_point(size=3, alpha=1) +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
labs(title="Cohorts Retention ratio dynamics")
p + geom_line(size=2, alpha=1/2) +
geom_point(size=3, alpha=1) +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
labs(title="Cohorts Retention ratio dynamics") +
theme_bw()
# devtools::install_github("rstudio/leaflet@56eb3ecbb25ddc195c1cc6f530246dbb565f99ee")
library(leaflet)
# devtools::install_github("ropensci/plotly@dce5a288b2b7daddf3884b4f57dbfa4e02b9fab8")
library(plotly)
library(crosstalk)
library(htmltools)
library(dplyr)
library(tidyr)
data(pedestrians, package = "pedestrians")
data(pedestrians, package = "pedestrians")
install.packages('pedestrians')
devtools::install_github("cpsievert/pedestrians")
data(pedestrians, package = "pedestrians")
devtools::install_github("cpsievert/pedestrians")
install.packages('tourr')
devtools::install_github("cpsievert/pedestrians")
data(pedestrians, package = "pedestrians")
data(sensors, package = "pedestrians")
data(cog, package = "pedestrians")
# put all the cognostics on a 0-1 scale
cogVars <- setdiff(names(cog), "ID")
for (i in cogVars) {
cog[[i]] <- scales::rescale(cog[[i]])
}
# attach the sensor description
cog <- dplyr::left_join(cog, sensors[c("ID", "Description")], "ID")
# attach the sensor description
cog <- dplyr::left_join(cog, sensors[c("ID", "Description")], "ID")
# random sample (needed for performance/speed)
n <- nrow(pedestrians)
pedSample <- pedestrians[sample(n, n * 0.01), ]
# attach the sensor description
cog <- dplyr::left_join(cog, sensors[c("ID", "Description")], "ID")
# attach the sensor description
cog <- dplyr::left_join(cog, sensors[c("ID", "Description")], "ID")
cogVars <- setdiff(names(cog), "ID")
for (i in cogVars) {
cog[[i]] <- scales::rescale(cog[[i]])
}
# attach the sensor description
cog <- dplyr::left_join(cog, sensors[c("ID", "Description")], "ID")
sensors[c("ID", "Description")]
View(sensors)
cog <- dplyr::left_join(cog, sensors[c("ID", "Description")], "ID")
# attach the sensor description
cog <- dplyr::left_join(cog, sensors[c("ID", "Description")], "ID")
# attach the sensor description
cog <- dplyr::left_join(cog, sensors[c("ID", "Name")], "ID")
cog
cog %>% names
cog %>% head
cog %>% class
# attach the sensor description
cog <- dplyr::left_join(cog, sensors[c("ID", "Description")], "ID")
library(dplyr)
install.packages("dplyr")
# devtools::install_github("ropensci/plotly#554")
library(plotly)
library(crosstalk)
library(htmltools)
library(dplyr)
library(tidyr)
library(tourr)
data(pedestrians, package = "pedestrians")
data(cog, package = "pedestrians")
# tour of stl() influenced time-series cognostics
cogVars <- c("trend", "curvature", "linearity", "season", "peak", "trough")
cog01 <- rescale(cog[, cogVars])
tour <- new_tour(cog01, grand_tour(), NULL)
tour_dat <- function(step_size) {
step <- tour(step_size)
proj <- center(cog01 %*% step$proj)
data.frame(x = proj[,1], y = proj[,2], Name = rownames(cog01))
}
proj_dat <- function(step_size) {
step <- tour(step_size)
data.frame(
x = step$proj[,1], y = step$proj[,2], measure = colnames(cog01)
)
}
steps <- c(0, rep(1/15, 1000))
stepz <- cumsum(steps)
# tidy version of tour data
tour_dats <- lapply(steps, tour_dat)
tour_datz <- Map(function(x, y) cbind(x, step = y), tour_dats, stepz)
tour_dat <- dplyr::bind_rows(tour_datz)
# tidy version of tour projection data
proj_dats <- lapply(steps, proj_dat)
proj_datz <- Map(function(x, y) cbind(x, step = y), proj_dats, stepz)
proj_dat <- dplyr::bind_rows(proj_datz)
ax <- list(
title = "", range = c(-1.1, 1.1),
zeroline = F, showticklabels = F
)
options(digits = 3)
tour <- tour_dat %>%
SharedData$new(~Name, group = "melb") %>%
plot_ly(x = ~x, y = ~y, frame = ~step, color = I("black"),
height = 450, width = 800) %>%
add_markers(text = ~Name, hoverinfo = "text") %>%
layout(xaxis = ax, yaxis = ax)
axes <- proj_dat %>%
plot_ly(x = ~x, y = ~y, frame = ~step, hoverinfo = "none") %>%
add_segments(xend = 0, yend = 0, color = I("gray85")) %>%
add_text(text = ~measure, color = I("black")) %>%
layout(xaxis = ax, yaxis = ax)
# very important these animation options are specified _after_ subplot()
# since they call plotly_build(., registerFrames = T)
tour <- subplot(tour, axes, nrows = 1, shareY = T, margin = 0) %>%
animation_opts(33) %>%
hide_legend() %>%
layout(dragmode = "select") %>%
highlight(persistent = TRUE)
# "standardized" (i.e., mean 0, std dev 1) cognostics
cogSTD <- cog[, cogVars] %>%
scale() %>%
data.frame(stringsAsFactors = F) %>%
mutate(Name = rownames(.)) %>%
gather(variable, value, -Name) %>%
mutate(variable = factor(variable, cogVars))
# TODO: get this working in pure plot_ly() (needs a fix for building group index when x is categorical)
p <- cogSTD %>%
SharedData$new(~Name, group = "melb") %>%
ggplot(aes(variable, value, group = Name, text = Name)) +
geom_line() + geom_point(size = 0.01) +
theme_bw() + labs(x = NULL, y = NULL) +
theme(axis.text.x = element_text(angle = 45))
p2 <- p %>%
ggplotly(tooltip = "text", height = 400) %>%
layout(dragmode = "select", margin = list(b = 70)) %>%
highlight(off = "plotly_deselect", dynamic = TRUE, persistent = TRUE)
# stratisfied random sample of raw data (needed for performance/speed)
n <- nrow(pedestrians)
idx <- c()
for (i in unique(pedestrians$Name)) {
idx <- c(idx, sample(which(pedestrians$Name %in% i), n * 0.001))
}
pedSample <- pedestrians[idx, ]
# plot 3
p3 <- pedSample %>%
SharedData$new(~Name, group = "melb") %>%
plot_ly(x = ~Hour, y = ~Counts, text = ~paste(DateTime, "<br />", Name),
color = I("black"), alpha = 0.01, height = 400, hoverinfo = "text") %>%
toWebGL() %>%
layout(
title = "Raw Counts (randomly sampled)",
yaxis = list(title = ""),
xaxis = list(title = "Hour of Day")
) %>%
highlight(off = NULL, opacityDim = 1, persistent = TRUE)
# plot 4 (IQR ribbons)
tidyIQR <- function(data, groups = NULL) {
if (is.SharedData(data)) data <- data$origData()
for (i in groups) {
data <- group_by_(data, i, add = TRUE)
}
summarise(
data,
min = min(Counts, na.rm = T),
q1 = quantile(Counts, 0.25, na.rm = T),
med = median(Counts, na.rm = T),
q3 = quantile(Counts, 0.75, na.rm = T),
max = max(Counts, na.rm = T)
)
}
byHour <- tidyIQR(pedestrians, "Hour")
byHourID <- tidyIQR(pedestrians, c("Hour", "Name"))
byHourID <- SharedData$new(byHourID, ~Name, "melb")
p4 <- plot_ly(byHour, x = ~Hour, color = I("black"), height = 400) %>%
add_ribbons(ymin = ~q1, ymax = ~q3) %>%
add_lines(y = ~med) %>%
add_data(byHourID) %>%
group_by(Name) %>%
add_ribbons(ymin = ~q1, ymax = ~q3, alpha = 0.5) %>%
add_lines(y = ~med) %>%
layout(
title = "IQR by station vs overall",
yaxis = list(title = ""),
xaxis = list(title = "Hour of Day"),
dragmode = "zoom"
) %>%
highlight(off = NULL, opacityDim = 0, persistent = TRUE) %>%
hide_legend()
html <- tags$div(
style = "display: flex; flex-wrap: wrap",
tags$div(tour, align = "center", style = "width: 50%; padding: 1em; border: solid;"),
tags$div(p2, style = "width: 50%; padding: 1em; border: solid;"),
tags$div(p3, style = "width: 50%; padding: 1em; border: solid;"),
tags$div(p4, style = "width: 50%; padding: 1em; border: solid;")
)
# opens in an interactive session
res <- html_print(html)
# dir.create("docs/stl-tour")
# TODO: can this be done in a standalone fashion?
file.copy(
dir(dirname(res), full.names = TRUE),
"docs/stl-tour",
overwrite = T, recursive = T
)
res
library(MASS)
library(rpart)
head(birthwt)
getwd()
# Create new site in our recently cloned blogdown repository
new_site(dir = 'blogdown_source',
theme = 'kakawait/hugo-tranquilpeak-theme',
format = 'toml')
library(blogdown)
install_hugo()
new_site(dir = 'E:/Git/blogdown_source',
theme = 'kakawait/hugo-tranquilpeak-theme',
format = 'toml')
blogdown::build_site()
setwd("D/Git/blogdown_source")
setwd("D:/Git/blogdown_source")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
